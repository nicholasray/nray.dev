---
import { WebVitalScale } from "@src/components/WebVitalScale/index.astro";
import { Slider } from "@src/components/Slider/index.astro";
import { Input } from "@src/components/Input/index.astro";
import {
  scaleItem,
  scale,
  scaleInputContainer,
  scaleInput,
  scaleSliderContainer,
  scaleSliderContainerInner,
  scaleSlider,
  scaleSliderInner,
  scaleSliderLabel,
  scaleSliderValue,
} from "./INPScale.css";
---

<figure>
  <div class=`figure-item ${scaleItem}`>
    <WebVitalScale class={scale} range={[200, 500]} />

    <div class={scaleInputContainer}>
      <Input
        class={`inp-input ${scaleInput}`}
        placeholder="Press a key to see its interaction latencyâ€¦"
      />
    </div>

    <div class={scaleSliderContainer}>
      <div class={scaleSliderContainerInner}>
        <Slider
          class={scaleSlider}
          id="inp-slider"
          min="0"
          max="500"
          value="0"
          step="50"
        />
        <div class={scaleSliderInner}>
          <label for="inp-slider" class={scaleSliderLabel}
            >Adjust Keypress latency:</label
          >
          <span class={`inp-slider-value ${scaleSliderValue}`}>0 ms</span>
        </div>
      </div>
    </div>
  </div>
  <figcaption>
    Demo showing how interaction latency "feels" to the user. Crank up the
    keypress latency to increase rage ðŸ˜¡
  </figcaption>
</figure>

<script>
  import { onINP } from "web-vitals";
  const scale = document.querySelector(".web-vital-scale")! as HTMLElement;
  const latencyRange = document.querySelector(
    "#inp-slider",
  )! as HTMLInputElement;
  const latencyValue = document.querySelector(".inp-slider-value")!;
  const input = document.querySelector(".inp-input")!;

  latencyRange.addEventListener("input", () => {
    latencyValue.textContent = `${latencyRange.value} ms`;
  });

  input.addEventListener("keydown", () => {
    const t0 = performance.now();
    const delay = parseInt(latencyRange.value);

    while (performance.now() - t0 < delay);
  });

  if (
    !(
      window.PerformanceEventTiming &&
      "interactionId" in PerformanceEventTiming.prototype
    )
  ) {
    scale.classList.add("hidden");
  } else {
    onINP(
      (interaction) => {
        // @ts-ignore
        scale.value = interaction.value;
      },
      {
        durationThreshold: 16,
        reportAllChanges: true,
      },
    );
  }
</script>
