---
import { WebVitalScale } from "@src/components/WebVitalScale/index.astro";
import { Slider } from "@src/components/Slider/index.astro";
import { Input } from "@src/components/Input/index.astro";
---

<figure class="dark:bg-zinc-800 p-4 rounded-lg bg-zinc-100 shadow-md">
  <WebVitalScale class="pt-10 -mx-4" range={[200, 500]} />

  <div class="mt-4">
    <Input
      class="inp-input dark:bg-zinc-900"
      type="text"
      placeholder="Press a key to see its interaction latencyâ€¦"
    />
  </div>

  <div class="flex justify-center font-sans mt-2">
    <div class="flex max-w-xl flex-grow flex-col font-sans">
      <Slider
        class="mt-3 block"
        id="inp-slider"
        type="range"
        min="0"
        max="500"
        value="0"
        step="50"
      />
      <div class="flex justify-between text-base mt-3 items-baseline">
        <label
          for="inp-slider"
          class="font-semibold tracking-wide text-sm uppercase"
          >Adjust Keypress latency:</label
        >
        <span class="inp-slider-value text-lg font-bold">0 ms</span>
      </div>
    </div>
  </div>
</figure>

<script>
  import { onINP } from "web-vitals";
  const scale = document.querySelector(".web-vital-scale")! as HTMLElement;
  const latencyRange = document.querySelector(
    "#inp-slider",
  )! as HTMLInputElement;
  const latencyValue = document.querySelector(".inp-slider-value")!;
  const input = document.querySelector(".inp-input")!;

  latencyRange.addEventListener("input", () => {
    latencyValue.textContent = `${latencyRange.value} ms`;
  });

  input.addEventListener("keydown", () => {
    const t0 = performance.now();
    const delay = parseInt(latencyRange.value);

    while (performance.now() - t0 < delay);
  });

  if (
    !(
      window.PerformanceEventTiming &&
      "interactionId" in PerformanceEventTiming.prototype
    )
  ) {
    scale.classList.add("hidden");
  } else {
    onINP(
      (interaction) => {
        // @ts-ignore
        scale.value = interaction.value;
      },
      {
        durationThreshold: 0,
        reportAllChanges: true,
      },
    );
  }
</script>
