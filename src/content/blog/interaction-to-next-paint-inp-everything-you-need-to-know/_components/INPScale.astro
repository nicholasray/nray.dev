---
import { WebVitalScale } from "@src/components/WebVitalScale/index.astro";
import { Slider } from "@src/components/Slider/index.astro";
import { Input } from "@src/components/Input/index.astro";
---

<figure>
  <div
    class="figure-item dark:bg-white/2.5 px-4 py-8 rounded-lg bg-zinc-50 shadow-xl dark:ring-1 dark:ring-white/10 border-4 border-white dark:border-transparent"
  >
    <WebVitalScale class="-mx-4" range={[200, 500]} />

    <div class="pt-4">
      <Input
        class="inp-input dark:bg-zinc-900"
        type="text"
        placeholder="Press a key to see its interaction latencyâ€¦"
      />
    </div>

    <div class="flex justify-center font-sans mt-2">
      <div class="flex max-w-xl flex-grow flex-col font-sans">
        <Slider
          class="mt-3 block"
          id="inp-slider"
          type="range"
          min="0"
          max="500"
          value="0"
          step="50"
        />
        <div class="flex justify-between text-base mt-3 items-baseline">
          <label
            for="inp-slider"
            class="font-semibold tracking-wide text-sm uppercase"
            >Adjust Keypress latency:</label
          >
          <span class="inp-slider-value text-lg font-bold">0 ms</span>
        </div>
      </div>
    </div>
  </div>
  <figcaption>
    Demo showing how interaction latency "feels" to the user. Crank up the
    keypress latency to increase rage ðŸ˜¡
  </figcaption>
</figure>

<script>
  import { onINP } from "web-vitals";
  const scale = document.querySelector(".web-vital-scale")! as HTMLElement;
  const latencyRange = document.querySelector(
    "#inp-slider",
  )! as HTMLInputElement;
  const latencyValue = document.querySelector(".inp-slider-value")!;
  const input = document.querySelector(".inp-input")!;

  latencyRange.addEventListener("input", () => {
    latencyValue.textContent = `${latencyRange.value} ms`;
  });

  input.addEventListener("keydown", () => {
    const t0 = performance.now();
    const delay = parseInt(latencyRange.value);

    while (performance.now() - t0 < delay);
  });

  if (
    !(
      window.PerformanceEventTiming &&
      "interactionId" in PerformanceEventTiming.prototype
    )
  ) {
    scale.classList.add("hidden");
  } else {
    onINP(
      (interaction) => {
        // @ts-ignore
        scale.value = interaction.value;
      },
      {
        durationThreshold: 16,
        reportAllChanges: true,
      },
    );
  }
</script>
