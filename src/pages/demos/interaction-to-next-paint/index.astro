---
import Layout from "@layouts/Layout.astro";
import * as Accordion from "@components/Accordion";
import { Icon } from "astro-icon";
import { Picture } from "@astrojs/image/components";
import timeline from "@content/blog/interaction-to-next-paint-inp-3-optimizations-you-need-to-know/_assets/interaction-to-next-paint-components.png";
---

<Layout
  title={"Interaction to Next Paint (INP) Demo"}
  description="Interactive demo of INP using an accordion with the ability to change input delay, processing time, and presentation delay."
  noindex={true}
  nofollow={true}
>
  <main>
    <section class="mt-12 lg:mt-16">
      <div
        class="mx-auto max-w-7xl gap-16 md:grid md:grid-cols-2 px-4 sm:px-6 md:px-8"
      >
        <div>
          <h1
            class="text-4xl lg:text-5xl font-extrabold tracking-tight text-zinc-900 dark:text-white"
          >
            Interaction to Next Paint (INP) demo
          </h1>
          <div>
            <a href={timeline.src}>
              <Picture
                class="bg-white rounded-md mt-4 md:mt-8"
                loading="eager"
                alt="Interaction to Next Paint timeline"
                src={timeline}
                aspectRatio={timeline.width / timeline.height}
                width={timeline.width}
                height={timeline.height}
                widths={[400, 800, 1200]}
                sizes="(min-width: 48rem) 36rem, 100vw"
                fetchpriority={"high"}
              />
            </a>
          </div>
          <div class="space-y-4 mt-4 md:mt-8">
            <div>
              <label for="input-delay-input" class="block">
                Up to <strong><span>0</span>ms</strong> of additional input delay
              </label>
              <input
                id="input-delay-input"
                class="input-delay-input"
                type="range"
                min="0"
                max="300"
                value="0"
                step="50"
              />
            </div>
            <div>
              <label for="processing-time-input" class="block">
                <strong><span>0</span>ms</strong> of additional processing time
              </label>
              <input
                id="processing-time-input"
                class="processing-time-input"
                type="range"
                min="0"
                max="500"
                value="0"
                step="50"
              />
            </div>
            <div>
              <label for="item-count-input" class="block">
                <strong><span>10</span></strong> items affecting presentation delay
              </label>
              <input
                id="item-count-input"
                class="item-count-input"
                type="range"
                min="0"
                max="4"
                data-choices="[10,5000,10000,15000,20000]"
                value={0}
              />
            </div>
          </div>
        </div>
        <Accordion.Root
          className="divide-y dark:divide-zinc-700 shadow-xl text-zinc-600 dark:text-zinc-300 dark:zinc-200 bg-white dark:bg-zinc-800 rounded-md mt-4 md:mt-0 block"
        >
          {
            [...Array(10)].map((_, i) => (
              <Accordion.Item className="text-3xl divide-y dark:divide-zinc-700">
                <Accordion.Header as="h2">
                  <Accordion.Trigger
                    className="w-full p-4 font-mono cursor-pointer flex justify-between items-center"
                    key={i}
                  >
                    item {i + 1}
                    <Icon
                      name="heroicons:chevron-down"
                      class="chevron w-6 h-6 transition-transform duration-500"
                    />
                  </Accordion.Trigger>
                </Accordion.Header>
                <Accordion.Content
                  className="text-lg overflow-hidden hidden transition-[height] duration-500"
                  key={i}
                >
                  <div class="p-6">
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
                    do eiusmod tempor incididunt ut labore et dolore magna
                    aliqua. Ut enim ad minim veniam, quis nostrud exercitation
                    ullamco laboris nisi ut aliquip ex ea commodo consequat.
                    Duis aute irure dolor in reprehenderit in voluptate velit
                    esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
                    occaecat cupidatat non proident, sunt in culpa qui officia
                    deserunt mollit anim id est laborum.
                  </div>
                </Accordion.Content>
              </Accordion.Item>
            ))
          }
        </Accordion.Root>
      </div>
    </section>
  </main>
</Layout>

<style>
  .accordion-item--open .chevron {
    transform: rotate(-180deg);
  }

  .accordion-item--open .accordion-content {
    display: block;
    height: auto;
  }
</style>

<script>
  const inputDelayInput = document.querySelector(
    ".input-delay-input"
  ) as HTMLInputElement;
  const processingTimeInput = document.querySelector(
    ".processing-time-input"
  ) as HTMLInputElement;
  const itemCountInput = document.querySelector(
    ".item-count-input"
  ) as HTMLInputElement;
  const accordion = document.querySelector(".accordion") as HTMLElement;
  const itemTemplate = accordion.firstElementChild!.outerHTML;
  const itemChoices = JSON.parse(itemCountInput.dataset.choices!);

  function createItemString(key: number) {
    return itemTemplate
      .replaceAll("-0", `-${key}`)
      .replaceAll("item 1", `item ${(key + 1).toLocaleString()}`)
      .trim();
  }

  function blockMainThread(duration: number) {
    const t0 = performance.now();
    while (performance.now() - t0 < duration);
  }

  function loop() {
    setTimeout(() => {
      blockMainThread(parseInt(inputDelayInput.value));
      loop();
    });
  }

  [inputDelayInput, processingTimeInput, itemCountInput].forEach((input) => {
    input.addEventListener("input", (e) => {
      if (!(e.target && e.target instanceof HTMLInputElement)) {
        return;
      }

      const span = e.target.parentElement?.querySelector("span");
      if (!span) {
        return;
      }

      const value = parseInt(e.target.value);

      span.innerText = e.target.dataset.choices
        ? itemChoices[value].toLocaleString()
        : value;
    });
  });

  itemCountInput.addEventListener("change", (e) => {
    if (!(e.target && e.target instanceof HTMLInputElement)) {
      return;
    }
    const desiredCount = itemChoices[parseInt(e.target.value)];
    const currentCount = accordion.childElementCount;

    if (desiredCount > accordion.childElementCount) {
      // add more
      const nodes = [];
      for (let i = currentCount; i < desiredCount; i++) {
        nodes.push(createItemString(i));
      }
      const template = document.createElement("template");
      template.innerHTML = nodes.join("");
      accordion.append(...template.content.children);
    } else {
      // remove
      const children = Array.from(accordion.children);
      for (let i = currentCount - 1; i >= desiredCount; i--) {
        children[i].remove();
      }
    }
  });

  accordion.addEventListener("accordion-change", () => {
    blockMainThread(parseInt(processingTimeInput.value));
  });

  loop();
</script>
