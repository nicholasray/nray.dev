---
import Layout from "@layouts/Layout.astro";
import { getPost } from "@src/api";
import { type CollectionEntry, getCollection } from "astro:content";
import { Image } from "@components/Image/index.astro";
import avatar from "@assets/images/avatar.jpg";
import { format } from "date-fns";
import { TableOfContents } from "@components/TableOfContents/index.astro";
import Prose from "@components/Prose.astro";
import { DIMENSIONS } from "./[slug].png";
import BlogImage from "@src/components/BlogImage.astro";
import { Aside } from "@src/components/Aside/index.astro";

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const blogEntries = await getCollection("blog", ({ data }) => {
    return !(!data.publishedAt && import.meta.env.PROD);
  });
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

interface Props {
  entry: CollectionEntry<"blog">;
}

// 2. When it's time to render, you can get the entry directly from the prop
const post = await getPost(Astro.props.entry);
const { Content, headings, readingTime, slug } = post;
const { title, description, cover, publishedAt, updatedAt } = post.data;
---

<Layout
  title={title}
  description={description}
  openGraph={{
    basic: {
      title,
      type: "article",
      image: new URL(`/blog/${slug}.png`, Astro.url),
    },
    article: {
      authors: ["Nicholas Ray"],
    },
    image: {
      width: DIMENSIONS.width,
      height: DIMENSIONS.height,
      alt: cover.alt,
    },
  }}
  twitter={{
    card: "summary_large_image",
  }}
>
  <main class="mt-8">
    <article>
      <section
        class="mx-auto mt-8 px-4 sm:px-6 md:mt-12 md:max-w-2xl md:gap-x-10 md:px-8 lg:mt-14 lg:grid lg:max-w-5xl lg:grid-cols-[245px_minmax(0,1fr)_245px] lg:gap-x-14 xl:max-w-8xl"
      >
        <div class="col-start-2 lg:col-end-[-1] xl:col-end-3">
          <h1
            class="text-3xl font-extrabold tracking-tight text-zinc-900 md:max-w-5xl md:text-5xl dark:text-white"
          >
            {title}
          </h1>
        </div>
        <div
          class="col-start-2 mb-8 mt-4 flex items-center text-sm font-medium md:mx-auto md:mb-10 md:mt-6 md:text-base lg:col-end-[-1] lg:mx-0 lg:mb-14 lg:mt-8 xl:col-end-3"
        >
          <div class="flex items-center font-medium">
            <div class="mr-3 h-10 w-10 rounded-full md:h-12 md:w-12">
              <a href="/about/" class="flex items-center">
                <Image
                  loading="eager"
                  class="rounded-full"
                  src={avatar}
                  widths={[48, 96]}
                  sizes="48px"
                  alt="Avatar"
                />
              </a>
            </div>

            <div class="md:flex md:items-center">
              <div>
                <a href="/about/" class="flex items-center"> Nicholas Ray</a>
              </div>
              <div class="mt-0.5 flex items-center md:mt-0">
                <span class="mx-3 hidden font-bold md:block">·</span>
                <time datetime={publishedAt && publishedAt.toISOString()}>
                  {publishedAt ? format(publishedAt, "LLL d, yyyy") : ""}
                </time>
                {
                  updatedAt && (
                    <>
                      &nbsp;— Updated&nbsp;
                      <time datetime={updatedAt && updatedAt.toISOString()}>
                        {format(updatedAt, "LLL d, yyyy")}
                      </time>{" "}
                    </>
                  )
                }
                <span class="mx-2 hidden font-bold sm:block md:mx-3">·</span>
                <div class="hidden sm:block">{readingTime}</div>
              </div>
            </div>
          </div>
        </div>
        <div class="hidden md:row-start-3 lg:block">
          <TableOfContents headings={headings} />
        </div>
        <Prose
          class="font-normal text-zinc-800 lg:col-[2/-1] xl:col-[2/3] dark:text-zinc-300/80"
        >
          <Content components={{ Image: BlogImage, Aside }} />
        </Prose>
      </section>
    </article>
  </main>
</Layout>

<script>
  import sectionObserver from "@components/TableOfContents/sectionObserver";

  const selectors = ["h2", "h3", "h4", "h5", "h6"].map(
    (selector) => `.prose > ${selector}`
  );
  selectors.unshift("h1");

  const toc = document.querySelector("nray-table-of-contents");
  const observer = sectionObserver({
    elements: document.querySelectorAll(selectors.join(", ")),
    topMargin: 40,
    throttleMs: 100,
    onIntersection: (element) => {
      if (!toc) {
        return;
      }

      const tocItem = document.getElementById(`toc-${element.id}`);
      if (!tocItem) {
        console.warn(`Could not find TOC item toc-${element.id}`);
        return;
      }

      // @ts-ignore
      toc.highlight(tocItem);
    },
  });

  // Calculate intersected section during page load.
  observer.calcIntersection();
</script>
