---
import Layout from "@layouts/Layout.astro";
import { getPost } from "@src/api";
import { type CollectionEntry, getCollection } from "astro:content";
import { Image } from "@components/Image/index.astro";
import avatar from "@assets/images/avatar.jpg";
import { format } from "date-fns";
import { TableOfContents } from "@components/TableOfContents/index.astro";
import Prose from "@components/Prose.astro";
import { DIMENSIONS } from "./[slug].png";
import styles from "./_[slug].module.css";
const {
  main,
  section,
  sectionInner,
  sectionTitle,
  sectionMeta,
  sectionMetaInner,
  avatarContainer,
  avatarLink,
  avatarImage,
  authorInfo,
  authorLink,
  publishInfo,
  publishSeparator,
  publishSeparatorTwo,
  readingTimeContainer,
  tableOfContentsContainer,
  proseContainer,
} = styles;
import BlogImage from "@src/components/BlogImage.astro";
import { Aside } from "@src/components/Aside/index.astro";

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const blogEntries = await getCollection("blog", ({ data }) => {
    return !(!data.publishedAt && import.meta.env.PROD);
  });
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

interface Props {
  entry: CollectionEntry<"blog">;
}

// 2. When it's time to render, you can get the entry directly from the prop
const post = await getPost(Astro.props.entry);
const { Content, headings, readingTime, slug } = post;
const { title, description, cover, publishedAt, updatedAt } = post.data;
---

<Layout
  title={title}
  description={description}
  openGraph={{
    basic: {
      title,
      type: "article",
      image: new URL(`/blog/${slug}.png`, Astro.url),
    },
    article: {
      authors: ["Nicholas Ray"],
    },
    image: {
      width: DIMENSIONS.width,
      height: DIMENSIONS.height,
      alt: cover.alt,
    },
  }}
  twitter={{
    card: "summary_large_image",
  }}
>
  <main class={main}>
    <article>
      <section class={section}>
        <div class={sectionInner}>
          <h1 class={sectionTitle}>
            {title}
          </h1>
        </div>
        <div class={sectionMeta}>
          <div class={sectionMetaInner}>
            <div class={avatarContainer}>
              <a href="/about/" class={avatarLink}>
                <Image
                  loading="eager"
                  class={avatarImage}
                  src={avatar}
                  widths={[48, 96]}
                  sizes="48px"
                  alt="Avatar"
                />
              </a>
            </div>

            <div class={authorInfo}>
              <div>
                <a href="/about/" class={authorLink}> Nicholas Ray</a>
              </div>
              <div class={publishInfo}>
                <span class={publishSeparator}>·</span>
                <time datetime={publishedAt && publishedAt.toISOString()}>
                  {publishedAt ? format(publishedAt, "LLL d, yyyy") : ""}
                </time>
                {
                  updatedAt && (
                    <>
                      &nbsp;— Updated&nbsp;
                      <time datetime={updatedAt && updatedAt.toISOString()}>
                        {format(updatedAt, "LLL d, yyyy")}
                      </time>{" "}
                    </>
                  )
                }
                <span class={publishSeparatorTwo}>·</span>
                <div class={readingTimeContainer}>{readingTime}</div>
              </div>
            </div>
          </div>
        </div>
        <div class={tableOfContentsContainer}>
          <TableOfContents headings={headings} />
        </div>
        <Prose class={proseContainer}>
          <Content components={{ Image: BlogImage, Aside }} />
        </Prose>
      </section>
    </article>
  </main>
</Layout>

<script>
  import sectionObserver from "@components/TableOfContents/sectionObserver";

  const selectors = ["h2", "h3", "h4", "h5", "h6"].map(
    (selector) => `.prose > ${selector}`
  );
  selectors.unshift("h1");

  const toc = document.querySelector("nray-table-of-contents");
  const observer = sectionObserver({
    elements: document.querySelectorAll(selectors.join(", ")),
    topMargin: 40,
    throttleMs: 100,
    onIntersection: (element) => {
      if (!toc) {
        return;
      }

      const tocItem = document.getElementById(`toc-${element.id}`);
      if (!tocItem) {
        console.warn(`Could not find TOC item toc-${element.id}`);
        return;
      }

      // @ts-ignore
      toc.highlight(tocItem);
    },
  });

  // Calculate intersected section during page load.
  observer.calcIntersection();
</script>
