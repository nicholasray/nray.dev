---
interface Props {
  description: string;
  src: [string];
  width: string;
  height: string;
  caption: string;
  hasShadow?: boolean;
}

const { src, hasShadow, width, height, caption, description } = Astro.props;
const descId = `video-${src[0].split("/").pop()!.split(".").shift()}`;
---

<figure class:list={["flex flex-col items-center", { "shadow-xl": hasShadow }]}>
  <video
    style={`aspect-ratio: ${width} / ${height}`}
    class={`lazy-load rounded-lg`}
    aria-describedby={descId}
    width={width}
    height={height}
    controls
    playsinline
    disablepictureinpicture
    loop
    muted
    autoplay
  >
    {
      src.map((srcStr) => {
        const ext = srcStr.split(".").pop();
        return <source data-src={srcStr} type={`video/${ext}`} />;
      })
    }
  </video>
  {caption && <figcaption>{caption}</figcaption>}
  <p class="sr-only" id={descId}>{description}</p>
</figure>

<script>
  if (window.IntersectionObserver) {
    const observer = new IntersectionObserver(
      function (entries) {
        entries.forEach(function (entry) {
          if (!entry.isIntersecting) {
            return;
          }

          const video = entry.target as HTMLVideoElement;
          for (let source of video.children) {
            if (source instanceof HTMLSourceElement && source.dataset.src) {
              source.src = source.dataset.src;
            }
          }

          video.load();
          observer.unobserve(video);
        });
      },
      {
        rootMargin: "0px 0px 50% 0px",
      }
    );

    const videos = document.querySelectorAll("video.lazy-load");
    for (let video of videos) {
      observer.observe(video);
    }
  }
</script>
