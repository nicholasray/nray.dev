---
import type { GetImageResult, ImageMetadata } from "astro";
import type { HTMLAttributes } from "astro/types";
import { getImage } from "astro:assets";

type Img = Omit<HTMLAttributes<"img">, "src">;

interface Props extends Img {
  src: ImageMetadata | string;
  dark?: ImageMetadata | string;
  widths?: number[];
  sizes?: string;
  pictureClass?: string;
  alt: string;
}

const props = Astro.props as Props;
const [light, dark] =
  props.widths && props.sizes
    ? await Promise.all([
        Promise.all(
          props.widths.map((width) => {
            return getImage({ src: props.src, width });
          }),
        ),
        props.dark &&
          Promise.all(
            props.widths.map((width) => {
              return getImage({ src: props.dark!, width });
            }),
          ),
      ])
    : await Promise.all([
        Promise.all([getImage({ src: props.src })]),
        props.dark ? Promise.all([getImage({ src: props.dark })]) : null,
      ]);

const format = `image/${light[0].options.format}`;
// eslint-disable-next-line no-unused-vars
const { src, pictureClass, dark: _, widths: __, sizes, ...rest } = props;
const attributes = {
  ...light[0].attributes,
  ...rest,
};
const original = light[light.length - 1].src;

function getSrcSet(images: GetImageResult[]) {
  if (!props.widths) {
    return null;
  }

  return images
    .reduce((previous, current, index) => {
      previous.push(`${current.src} ${props.widths![index]}w`);

      return previous;
    }, [] as string[])
    .join(", ");
}
---

{
  dark ? (
    <picture class={pictureClass}>
      <source
        srcset={
          format === "image/svg"
            ? light[light.length - 1].src
            : getSrcSet(light)
        }
        media="(prefers-color-scheme: light)"
        sizes={sizes}
      />
      <source
        srcset={
          format === "image/svg" ? dark[dark.length - 1].src : getSrcSet(dark)
        }
        media="(prefers-color-scheme: dark)"
        sizes={sizes}
      />
      <img src={original} {...attributes} />
    </picture>
  ) : (
    <img
      src={original}
      srcset={getSrcSet(light)}
      sizes={sizes}
      {...attributes}
    />
  )
}
