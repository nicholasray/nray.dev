---
import type { GetImageResult, ImageMetadata } from "astro";
import type { HTMLAttributes } from "astro/types";
import { getImage } from "astro:assets";

type Img = Omit<HTMLAttributes<"img">, "src">;

interface Props extends Img {
  src: ImageMetadata;
  dark?: ImageMetadata;
  widths?: number[];
  sizes?: string;
  alt: string;
  class?: string;
}

const props = Astro.props as Props;

/* eslint-disable no-unused-vars */
const {
  class: className,
  src: _,
  dark: __,
  widths: ___,
  sizes: ____,
  ...attrs
} = props;
/* eslint-enable no-unused-vars */

interface Variant {
  src: ImageMetadata;
  media: string;
}

if (props.src.format === "svg") {
  // Remove sizes and widths if svg as there should only be one size.
  props.widths = undefined;
  props.sizes = undefined;
}

const variants: Variant[] = [
  { src: props.src, media: "(prefers-color-scheme: light)" },
];
if (props.dark) {
  variants.push({ src: props.dark, media: "(prefers-color-scheme: dark)" });
}

const images = await Promise.all(
  variants.map(async (variant) => {
    const widths = props.widths ?? [undefined];

    return {
      ...variant,
      widths: await Promise.all(
        widths.map((width) => {
          return getImage({
            src: variant.src,
            width,
            quality: 100,
            format: props.src.format,
          });
        }),
      ),
    };
  }),
);

function getSrcSet(images: GetImageResult[]) {
  if (props.src.format === "svg") {
    return images[0].src;
  }

  if (!props.widths) {
    return null;
  }

  return images
    .reduce((previous, current, index) => {
      previous.push(`${current.src} ${props.widths![index]}w`);

      return previous;
    }, [] as string[])
    .join(", ");
}

const imgAttrs = {
  ...images[0].widths[0].attributes,
  width: props.src.width,
  height: props.src.height,
  ...attrs,
  decoding: undefined,
};
---

{
  images.length > 1 ? (
    <picture class={className}>
      {images.map((image) => {
        return (
          <source
            srcset={getSrcSet(image.widths)}
            media={image.media}
            sizes={props.sizes}
          />
        );
      })}
      <img
        src={images[0].widths[images[0].widths.length - 1].src}
        {...imgAttrs}
      />
    </picture>
  ) : (
    <img
      src={images[0].widths[images[0].widths.length - 1].src}
      srcset={
        images[0].widths.length > 1 ? getSrcSet(images[0].widths) : undefined
      }
      sizes={props.sizes}
      class={className}
      {...imgAttrs}
    />
  )
}
