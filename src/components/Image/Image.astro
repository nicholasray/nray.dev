---
import type { ImageMetadata } from "astro";
import { getImage, type LocalImageProps } from "astro:assets";

type Props = {
  src: ImageMetadata;
  dark?: ImageMetadata;
} & LocalImageProps;

const props = Astro.props as Props;

const {
  class: className,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  src: _,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  dark: __,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  widths: ___,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  sizes: ____,
  ...attrs
} = props;

interface Variant {
  src: ImageMetadata;
  class?: string;
}

if (props.src.format === "svg") {
  // Remove sizes and widths if svg as there should only be one size.
  props.widths = undefined;
  props.sizes = undefined;
}

const variants: Variant[] = [{ src: props.src, class: className ?? undefined }];
if (props.dark) {
  variants[0] = { ...variants[0], class: [className, "dark:hidden"].join(" ") };
  variants.push({
    src: props.dark,
    class: [className, "hidden", "dark:block"].join(" "),
  });
}

const images = (
  await Promise.all(
    variants.flatMap(async (variant) => {
      const formats = props.src.format === "svg" ? ["svg"] : ["avif"];

      return Promise.all(
        formats.map(async (format) => {
          return {
            ...variant,
            widths: await getImage({
              src: variant.src,
              widths: props.widths,
              quality: 75,
              format: format,
            }),
          };
        })
      );
    })
  )
).flat();

const imgAttrs = {
  ...images[0].widths.attributes,
  width: props.src.width,
  height: props.src.height,
  ...attrs,
  decoding: undefined,
};
---

{
  images.length > 1 ? (
    <>
      {images.map((image) => {
        return (
          <img
            sizes={props.sizes}
            srcset={
              props.src.format === "svg"
                ? image.src.src
                : image.widths.srcSet.attribute
            }
            src={
              props.src.format === "svg"
                ? images[0].src.src
                : images[0].widths.srcSet.values[
                    images[0].widths.srcSet.values.length - 1
                  ].url
            }
            class={image.class}
            {...imgAttrs}
          />
        );
      })}
    </>
  ) : (
    <img
      src={
        props.src.format === "svg"
          ? images[0].src.src
          : images[0].widths.srcSet.values[
              images[0].widths.srcSet.values.length - 1
            ].url
      }
      srcset={
        props.src.format === "svg"
          ? undefined
          : images[0].widths.srcSet.attribute
      }
      sizes={props.sizes}
      class={className}
      {...imgAttrs}
    />
  )
}
