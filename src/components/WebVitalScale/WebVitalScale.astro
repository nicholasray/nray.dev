---
interface Props {
  class?: string;
  range: [number, number];
}

const { range, class: className } = Astro.props;
---

<nray-web-vital-scale
  class:list={["web-vital-scale", "relative -mx-4 block font-sans", className]}
  data-range={range[0] + range[1]}
>
  <div class="flex text-center font-bold">
    <div
      class="flex flex-auto items-center justify-center bg-emerald-100 px-4 py-8 text-green-950 dark:bg-[#1D2A24] dark:text-emerald-100 dark:ring-1 dark:ring-[#3F8862]"
      style={`flex-basis: ${range[0]}px`}
    >
      GOOD
    </div>
    <div
      class="flex flex-auto items-center justify-center bg-orange-100 px-4 py-8 text-orange-950 dark:bg-[#2A261D] dark:text-amber-100 dark:ring-1 dark:ring-[#B68F25]"
      style={`flex-basis: ${range[1] - range[0]}px`}
    >
      NEEDS IMPROVEMENT
    </div>
    <div
      class="flex flex-auto items-center justify-center bg-red-100 px-4 py-8 text-red-950 dark:bg-[#2A1D1D] dark:text-red-100 dark:ring-1 dark:ring-[#775050]"
      style={`flex-basis: ${range[0]}px`}
    >
      POOR
    </div>
  </div>
  <div class="flex -translate-y-1/4 justify-center">
    <div
      class="web-vital-scale__score relative flex items-center justify-center rounded-lg bg-white px-3 py-1 font-mono text-base font-bold opacity-0 drop-shadow-md before:absolute before:-top-[7px] before:block before:h-0 before:w-0 before:border-b-[8px] before:border-l-[8px] before:border-r-[8px] before:border-b-white before:border-l-transparent before:border-r-transparent dark:text-zinc-900"
    >
      0
    </div>
  </div>
</nray-web-vital-scale>

<script>
  import { animate } from "motion/mini";
  import { spring } from "motion";

  function getRelativeBox(parent: HTMLElement, child: HTMLElement) {
    const parentBox = parent.getBoundingClientRect();
    const childBox = child.getBoundingClientRect();

    return {
      width: childBox.width,
      height: childBox.height,
      x: childBox.x === 0 ? 0 : childBox.x - parentBox.x,
      y: childBox.y === 0 ? 0 : childBox.y - parentBox.y,
    };
  }

  export class WebVitalScale extends HTMLElement {
    #value?: number;
    #score: HTMLElement;
    #range: number;

    constructor() {
      super();

      this.#score = this.querySelector(".web-vital-scale__score")!;
      this.#range = Number.parseInt(this.dataset.range!);
    }

    set value(value: number) {
      if (value === this.#value) {
        return;
      }

      if (this.#value === undefined) {
        this.#value = value;
        this.animateEntrance(value);
        return;
      }

      this.#value = value;
      this.animateToNextValue(value);
    }

    changeValue(value: number) {
      this.#score.textContent = `${value.toLocaleString()} ms`;

      const scaleWidth = this.getBoundingClientRect().width;
      const thumbWidth = this.#score.getBoundingClientRect().width;

      const thumbStart = (value - this.#range / 2) / this.#range;

      // See if the end of the thumb is past the end of the scale.
      const thumbEndComputed =
        Math.abs(thumbStart) * scaleWidth + thumbWidth / 2;

      if (thumbEndComputed > scaleWidth / 2) {
        this.#score.parentElement!.style.justifyContent =
          thumbStart < 0 ? "flex-start" : "flex-end";
        this.#score.style.insetInlineStart = "auto";

        return;
      }

      this.#score.parentElement!.style.justifyContent = "center";
      this.#score.style.insetInlineStart = `${(thumbStart * 100).toFixed(2)}%`;
    }

    animateToNextValue(value: number) {
      // First
      const before = getRelativeBox(this, this.#score);

      // Set change
      this.changeValue(value);

      // Last
      const after = getRelativeBox(this, this.#score);

      // Invert
      const invert = before.x - after.x;

      animate(
        this.#score,
        {
          transform: [`translateX(${invert}px)`, `translateX(0)`],
        },
        { type: spring }
      );
    }

    animateEntrance(value: number) {
      this.changeValue(value);

      animate(
        this.#score,
        {
          opacity: [0, 1],
          scale: [0.7, 1],
        },
        { type: spring }
      );
    }
  }

  customElements.define("nray-web-vital-scale", WebVitalScale);
</script>
